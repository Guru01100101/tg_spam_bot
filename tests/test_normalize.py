import os
import pytest
from utils.regex import SpamFilter

def test_basic_message_normalization():
    """Test basic message normalization functionality"""
    # Initialize the filter
    spam_filter = SpamFilter()
    
    # Add a test pattern
    spam_filter.add_pattern('—Ä—É–±–ª—å')
    
    # Test cases with spaces and special characters
    test_cases = [
        ('—Ä—É–±–ª—å', True),
        ('—Ä —É –± –ª —å', True),
        ('—Ä.—É.–±.–ª.—å', True),
        ('—Ä-—É-–±-–ª-—å', True),
        ('—Ä—É–±–ª—å!', True),
        ('_—Ä_—É_–±_–ª_—å_', True),
        ('–†–£–ë–õ–¨', True),
        ('–†—É–ë–ª–¨', True),
        ('–≠—Ç–æ —Å—Ç–æ–∏—Ç 100 —Ä—É–±–ª–µ–π', True),
        ('–∞–±–≤–≥–¥', False),
    ]
    
    for message, should_match in test_cases:
        assert spam_filter.is_spam(message) == should_match

def test_cyrillic_latin_substitution():
    """Test substitution of visually similar Cyrillic and Latin characters"""
    # Initialize the filter
    spam_filter = SpamFilter()
    
    # Add a test pattern
    spam_filter.add_pattern('—Ä—É–±–ª—å')
    
    # Test cases with character substitutions
    test_cases = [
        # —Ä=p, —É=y, –±=b, –ª=l, —å=b
        ('py–±–ªb', True),        # Mixed Cyrillic and Latin
        ('—Ä—É–±–ª—å', True),        # All Cyrillic
        ('py–±l—å', True),        # More mixing
        ('—Ä—Éb–ª—å', True),        # Just one Latin letter
        ('p—Éb–ª—å', True),        # Two Latin letters
        ('–ø—Ä–∏–º–µ—Ä', False),      # Different word in Cyrillic
        ('example', False),     # English word
    ]
    
    for message, should_match in test_cases:
        assert spam_filter.is_spam(message) == should_match

def test_character_spacing_and_repetition():
    """Test handling of character spacing and repetition"""
    # Initialize the filter
    spam_filter = SpamFilter()
    
    # Add test patterns
    spam_filter.add_pattern('—Ä—É–±–ª—å')
    
    # Test cases with spacing and repetition
    test_cases = [
        ('—Ä—Ä—Ä—Ä—É—É—É—É–±–±–±–ª–ª–ª—å—å—å', True),    # Repeated characters
        ('—Ä  —É  –±  –ª  —å', True),        # Multiple spaces between characters
        ('—Ä\n—É\n–±\n–ª\n—å', True),        # Newlines between characters
        ('—Ä\t—É\t–±\t–ª\t—å', True),        # Tabs between characters
        ('—Ä—Ä—Ä—Ä    —É—É—É   –±–±–±   –ª–ª–ª–ª   —å—å—å', True),  # Mix of repetition and spaces
        ('–∞–±–≤–≥–¥–µ–∂–∑', False),            # Different word
    ]
    
    for message, should_match in test_cases:
        assert spam_filter.is_spam(message) == should_match

def test_robustness_to_obfuscation():
    """Test robustness against common obfuscation techniques"""
    # Initialize the filter
    spam_filter = SpamFilter()
    
    # Add test pattern
    spam_filter.add_pattern('—Ä—É–±–ª—å')
    
    # Test cases with various obfuscation techniques
    test_cases = [
        ('—Ä*—É*–±*–ª*—å', True),            # Stars between characters
        ('—Ä/—É/–±/–ª/—å', True),            # Slashes between characters
        ('—Ä.—É.–±.–ª.—å', True),            # Dots between characters
        ('—Ä-—É-–±-–ª-—å', True),            # Hyphens between characters
        ('—Ä_—É_–±_–ª_—å', True),            # Underscores between characters
        ('—Äüëç—Éüëç–±üëç–ªüëç—å', True),          # Emojis between characters
        ('—Äüí∞—Éüí∞–±üí∞–ªüí∞—å', True),          # Money emojis between characters
    ]
    
    for message, should_match in test_cases:
        assert spam_filter.is_spam(message) == should_match
