import asyncio
import json
from datetime import datetime, timedelta
from typing import Any
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest
from aiogram.enums.chat_member_status import ChatMemberStatus
from models.settings import ADMIN_IDS, add_dynamic_admin, remove_dynamic_admin, is_env_admin, get_dynamic_admin_ids, \
    get_admin_ids, get_all_admin_ids

class AdminStates(StatesGroup):
    waiting_for_word_to_add = State()
    waiting_for_word_to_remove = State()
    waiting_for_admin_id_to_add = State()
    waiting_for_admin_id_to_remove = State()
    waiting_for_char_to_add = State()
    waiting_for_mapping_to_add = State()
    waiting_for_char_to_remove = State()
    waiting_for_mapping_to_remove = State()

def make_user_tag(user: types.User) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Ç–µ–≥–æ–≤–∞–Ω–∏–π username –∞–±–æ –ª—ñ–Ω–∫ –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è Markdown."""
    if user.username:
        # –ë–µ–∑ @ —è–∫—â–æ username –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ @, —ñ–Ω–∞–∫—à–µ –¥–æ–¥–∞—î–º–æ @
        safe_username = user.username.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]')
        return f"@{safe_username}"
    name = user.first_name or "User"
    # –ï–∫—Ä–∞–Ω—É—î–º–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∏ –¥–ª—è Markdown
    safe_name = name.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]')
    return f"[{safe_name}](tg://user?id={user.id})"

class AdminPanel:
    def __init__(self, bot: Bot, dp: Dispatcher, spam_filter, ban_duration_days: int, mute_duration_days: int):
        self.ban_duration_days = ban_duration_days
        self.mute_duration_days = mute_duration_days
        self.bot = bot
        self.dp = dp
        self.admin_ids = ADMIN_IDS
        self.spam_filter = spam_filter
        self.deleted_messages: dict[int, dict[str, Any]] = {}  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏–¥–∞–ª–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        self.pending_actions: dict[str, dict[str, Any]] = {}   # –î–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ handler
        self.cleanup_old_messages()

    def cleanup_old_messages(self):
        current_time = datetime.now()
        old_messages = []
        for msg_id, msg_info in self.deleted_messages.items():
            if (current_time - msg_info['timestamp']).total_seconds() > 86400:
                old_messages.append(msg_id)
        for msg_id in old_messages:
            del self.deleted_messages[msg_id]
        if old_messages:
            print(f"Cleaned up {len(old_messages)} old messages")

    def is_admin(self, user_id: int) -> bool:
        return user_id in self.admin_ids

    async def admin_menu(self, message: types.Message):
        if not self.is_admin(message.from_user.id):
            return
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–ª–æ–≤–∞–º–∏", callback_data="admin_words")],
            [InlineKeyboardButton(text="üëë –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏", callback_data="admin_management")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton(text="üÜî –ú—ñ–π ID", callback_data="admin_my_id")]
        ])
        await message.answer(
            "üîß **–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å**\n\n–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

    def register_admin_handlers(self):
        self.dp.message.register(self.admin_menu, Command("admin"))
        self.dp.message.register(self.admin_add_word, Command("add_word"))
        self.dp.message.register(self.admin_remove_word, Command("remove_word"))
        self.dp.message.register(self.admin_list_words, Command("list_words"))
        self.dp.message.register(self.admin_management, Command("admins"))
        self.dp.message.register(self.admin_add_admin, Command("add_admin"))
        self.dp.message.register(self.admin_remove_admin, Command("remove_admin"))
        self.dp.message.register(self.admin_add_chat_admins, Command("add_chat_admins"))
        self.dp.message.register(self.get_my_id, Command("my_id"))
        self.dp.callback_query.register(self.handle_admin_callback)
        # FSM
        self.dp.message.register(self.process_add_word, AdminStates.waiting_for_word_to_add)
        self.dp.message.register(self.process_remove_word, AdminStates.waiting_for_word_to_remove)
        self.dp.message.register(self.process_add_admin, AdminStates.waiting_for_admin_id_to_add)
        self.dp.message.register(self.process_remove_admin, AdminStates.waiting_for_admin_id_to_remove)
        # FSM –¥–ª—è –∫–∞—Ä—Ç–∏ —Å–∏–º–≤–æ–ª—ñ–≤
        self.dp.message.register(self.process_add_char, AdminStates.waiting_for_char_to_add)
        self.dp.message.register(self.process_add_mapping, AdminStates.waiting_for_mapping_to_add)
        self.dp.message.register(self.process_remove_char, AdminStates.waiting_for_char_to_remove)
        self.dp.message.register(self.process_remove_mapping, AdminStates.waiting_for_mapping_to_remove)

    async def forward_reported_message(self, message: types.Message, chat_id: int, user_id: int, reporter_id: int):
        """
        –ü–µ—Ä–µ—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –Ω–∞ —è–∫–µ –ø–æ—Å–∫–∞—Ä–∂–∏–≤—Å—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, –≤—Å—ñ–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        """
        try:
            message_info = {
                'user_id': user_id,
                'chat_id': chat_id,
                'text': message.text,
                'timestamp': datetime.now(),
                'user_username': message.from_user.username,
                'user_first_name': message.from_user.first_name,
                'user_last_name': message.from_user.last_name,
                'chat_title': message.chat.title,
                'chat_username': message.chat.username,
                'message_id': message.message_id,
                'reporter_id': reporter_id
            }
            self.deleted_messages[message.message_id] = message_info
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üö´ –ó–∞–±–∞–Ω–∏—Ç–∏", callback_data=f"ban_user:{user_id}:{chat_id}"),
                    InlineKeyboardButton(text="üîá –ó–∞–≥–ª—É—à–∏—Ç–∏", callback_data=f"mute_user:{user_id}:{chat_id}")
                ],
                [
                    InlineKeyboardButton(text="‚ùå –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_msg:{message.message_id}:{chat_id}"),
                    InlineKeyboardButton(text="‚úÖ –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏", callback_data=f"ignore_report:{message.message_id}:{chat_id}")
                ]
            ])
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–∏–π –ø–æ—Å–∫–∞—Ä–∂–∏–≤—Å—è
            try:
                reporter = await self.bot.get_chat_member(chat_id, reporter_id)
                reporter_display = make_user_tag(reporter.user)
            except:
                reporter_display = f"ID: {reporter_id}"
            
            user_display = make_user_tag(message.from_user)
            chat_display = message_info['chat_title'] or message_info['chat_username'] or f"Chat{chat_id}"
            # –í–∞–∂–ª–∏–≤–æ: –µ–∫—Ä–∞–Ω—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è Markdown!
            safe_text = (message.text or "").replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]')
            
            admin_message_text = (
                f"‚ö†Ô∏è **–°–ö–ê–†–ì–ê –ù–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø**\n\n"
                f"üë§ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:** {user_display}\n"
                f"üÜî **ID:** `{user_id}`\n"
                f"üïµÔ∏è **–°–∫–∞—Ä–∂–Ω–∏–∫:** {reporter_display}\n"
                f"üí¨ **–ß–∞—Ç:** {chat_display}\n"
                f"üìÖ **–ß–∞—Å:** {datetime.now().strftime('%H:%M:%S')}\n\n"
                f"üìù **–¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:**\n`{safe_text}`"
            )
            
            for admin_id in self.admin_ids:
                try:
                    await self.bot.send_message(
                        chat_id=admin_id,
                        text=admin_message_text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    print(f"Error sending report to admin {admin_id}: {e}")
        except Exception as e:
            print(f"Error processing reported message: {e}")
            
    async def forward_deleted_message(self, message: types.Message, chat_id: int, user_id: int):
        try:
            message_info = {
                'user_id': user_id,
                'chat_id': chat_id,
                'text': message.text,
                'timestamp': datetime.now(),
                'user_username': message.from_user.username,
                'user_first_name': message.from_user.first_name,
                'user_last_name': message.from_user.last_name,
                'chat_title': message.chat.title,
                'chat_username': message.chat.username,
                'message_id': message.message_id
            }
            self.deleted_messages[message.message_id] = message_info
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üö´ –ó–∞–±–∞–Ω–∏—Ç–∏", callback_data=f"ban_user:{user_id}:{chat_id}"),
                    InlineKeyboardButton(text="‚úÖ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏",
                                         callback_data=f"restore_msg:{message.message_id}:{chat_id}")
                ]
            ])
            user_display = make_user_tag(message.from_user)
            chat_display = message_info['chat_title'] or message_info['chat_username'] or f"Chat{chat_id}"
            # –í–∞–∂–ª–∏–≤–æ: –µ–∫—Ä–∞–Ω—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è Markdown!
            safe_text = (message.text or "").replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]')
            admin_message_text = (
                f"üîç **–í–∏–¥–∞–ª–µ–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è**\n\n"
                f"üë§ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:** {user_display}\n"
                f"üÜî **ID:** `{user_id}`\n"
                f"üí¨ **–ß–∞—Ç:** {chat_display}\n"
                f"üìÖ **–ß–∞—Å:** {datetime.now().strftime('%H:%M:%S')}\n\n"
                f"üìù **–¢–µ–∫—Å—Ç:**\n`{safe_text}`"
            )
            for admin_id in self.admin_ids:
                try:
                    await self.bot.send_message(
                        chat_id=admin_id,
                        text=admin_message_text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    print(f"Error sending message to admin {admin_id}: {e}")
        except Exception as e:
            print(f"Error processing deleted message: {e}")

    async def handle_admin_callback(self, callback: types.CallbackQuery, state: FSMContext):
        if not self.is_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
            return
        data = callback.data
        if data == "admin_words":
            await self.show_words_menu(callback)
        elif data == "admin_management":
            await self.show_admin_management(callback)
        elif data == "admin_stats":
            await self.show_stats(callback)
        elif data == "admin_my_id":
            await self.show_my_id(callback)
        elif data == "admin_main":
            await self.admin_main_callback(callback)
        elif data == "add_word_btn":
            await self.start_add_word(callback, state)
        elif data == "remove_word_btn":
            await self.start_remove_word(callback, state)
        elif data == "list_words_btn":
            await self.show_words_list(callback)
        elif data == "add_admin_btn":
            await self.start_add_admin(callback, state)
        elif data == "remove_admin_btn":
            await self.start_remove_admin(callback, state)
        elif data == "add_chat_admins":
            await self.add_chat_admins_callback(callback)
        elif data.startswith("ban_user:"):
            await self.ban_user_from_callback(callback, data)
        elif data.startswith("restore_msg:"):
            await self.restore_message_from_callback(callback, data)
        elif data.startswith("delete_msg:"):
            await self.delete_reported_message(callback, data)
        elif data.startswith("ignore_report:"):
            await self.ignore_report(callback, data)
        elif data.startswith("mute_user:"):
            await self.mute_user_from_callback(callback, data)
        elif data == "char_map_btn":
            await self.show_char_map_menu(callback)
        elif data == "add_char_btn":
            await self.start_add_char(callback, state)
        elif data == "remove_char_btn":
            await self.start_remove_char(callback, state)
        elif data == "list_chars_btn":
            await self.show_char_list(callback)
        else:
            await callback.answer("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è")

    async def admin_main_callback(self, callback: types.CallbackQuery):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–ª–æ–≤–∞–º–∏", callback_data="admin_words")],
            [InlineKeyboardButton(text="üëë –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏", callback_data="admin_management")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton(text="üÜî –ú—ñ–π ID", callback_data="admin_my_id")]
        ])
        await callback.message.edit_text(
            "üîß **–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å**\n\n–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

    async def show_words_menu(self, callback: types.CallbackQuery):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ —Å–ª–æ–≤–æ", callback_data="add_word_btn")],
            [InlineKeyboardButton(text="‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ —Å–ª–æ–≤–æ", callback_data="remove_word_btn")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Å–ª—ñ–≤", callback_data="list_words_btn")],
            [InlineKeyboardButton(text="üî° –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–∏–º–≤–æ–ª–∞–º–∏", callback_data="char_map_btn")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_main")]
        ])
        await callback.message.edit_text(
            "üìã **–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–ª–æ–≤–∞–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó**\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

    async def show_admin_management(self, callback: types.CallbackQuery):
        env_admins = get_admin_ids()
        dynamic_admins = get_dynamic_admin_ids()
        env_text = "\n".join([f"‚Ä¢ {admin_id} (–∑ .env)" for admin_id in env_admins]) if env_admins else "–ù–µ–º–∞—î"
        dynamic_text = "\n".join(
            [f"‚Ä¢ {admin_id} (–¥–∏–Ω–∞–º—ñ—á–Ω–∏–π)" for admin_id in dynamic_admins]) if dynamic_admins else "–ù–µ–º–∞—î"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="add_admin_btn")],
            [InlineKeyboardButton(text="‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="remove_admin_btn")],
            [InlineKeyboardButton(text="üë• –î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ —á–∞—Ç—É", callback_data="add_chat_admins")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_main")]
        ])
        await callback.message.edit_text(
            f"üëë **–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏**\n\n"
            f"üìã **–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –∑ .env:**\n{env_text}\n\n"
            f"üìã **–î–∏–Ω–∞–º—ñ—á–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏:**\n{dynamic_text}\n\n"
            f"üí° *–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –∑ .env –Ω–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª—è—Ç–∏*",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

    async def show_stats(self, callback: types.CallbackQuery):
        patterns = self.spam_filter.get_patterns()
        env_admins = get_admin_ids()
        dynamic_admins = get_dynamic_admin_ids()
        stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üîç **–§—ñ–ª—å—Ç—Ä–∏:**
‚Ä¢ –°–ª—ñ–≤ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó: {len(patterns)}
‚Ä¢ –ë–∞–∑–æ–≤–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤: 4 (–∑ filters.json)

üëë **–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏:**
‚Ä¢ –ó .env: {len(env_admins)}
‚Ä¢ –î–∏–Ω–∞–º—ñ—á–Ω–∏—Ö: {len(dynamic_admins)}
‚Ä¢ –í—Å—å–æ–≥–æ: {len(env_admins) + len(dynamic_admins)}

ü§ñ **–°—Ç–∞—Ç—É—Å:** –ê–∫—Ç–∏–≤–Ω–∏–π
üìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y')}
‚è∞ **–ß–∞—Å:** {datetime.now().strftime('%H:%M:%S')}
        """
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_main")]
        ])
        await callback.message.edit_text(
            stats_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

    async def show_my_id(self, callback: types.CallbackQuery):
        user_id = callback.from_user.id
        username = callback.from_user.username or callback.from_user.first_name
        is_admin = self.is_admin(user_id)
        admin_status = "üëë **–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä**" if is_admin else "üë§ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á**"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_main")]
        ])
        await callback.message.edit_text(
            f"üÜî **–í–∞—à ID:** `{user_id}`\n"
            f"üë§ **–Ü–º'—è:** {username}\n"
            f"üìä **–°—Ç–∞—Ç—É—Å:** {admin_status}\n\n"
            f"üí° *–©–æ–± –¥–æ–¥–∞—Ç–∏ —Å–µ–±–µ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –¥–æ–¥–∞–π—Ç–µ –≤–∞—à ID –¥–æ ADMIN_IDS –≤ .env —Ñ–∞–π–ª—ñ:*\n"
            f"`ADMIN_IDS={user_id}` –∞–±–æ `ADMIN_IDS=123456789,{user_id}`",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

    async def start_add_word(self, callback: types.CallbackQuery, state: FSMContext):
        await callback.message.edit_text(
            "üìù –í–≤–µ–¥—ñ—Ç—å —Å–ª–æ–≤–æ –∞–±–æ —Ä–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_words")]
            ])
        )
        await state.set_state(AdminStates.waiting_for_word_to_add)

    async def start_remove_word(self, callback: types.CallbackQuery, state: FSMContext):
        await callback.message.edit_text(
            "üóë –í–≤–µ–¥—ñ—Ç—å —Å–ª–æ–≤–æ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_words")]
            ])
        )
        await state.set_state(AdminStates.waiting_for_word_to_remove)

    async def show_words_list(self, callback: types.CallbackQuery):
        patterns = self.spam_filter.get_patterns()
        if patterns:
            patterns_text = "\n".join([f"‚Ä¢ {pattern}" for pattern in patterns])
            text = f"üìã **–°–ø–∏—Å–æ–∫ —Å–ª—ñ–≤ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó:**\n\n{patterns_text}"
        else:
            text = "üìã –°–ø–∏—Å–æ–∫ —Å–ª—ñ–≤ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –ø–æ—Ä–æ–∂–Ω—ñ–π"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_words")]
        ])
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

    async def start_add_admin(self, callback: types.CallbackQuery, state: FSMContext):
        await callback.message.edit_text(
            "üÜî –í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_management")]
            ])
        )
        await state.set_state(AdminStates.waiting_for_admin_id_to_add)

    async def start_remove_admin(self, callback: types.CallbackQuery, state: FSMContext):
        await callback.message.edit_text(
            "üÜî –í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_management")]
            ])
        )
        await state.set_state(AdminStates.waiting_for_admin_id_to_remove)

    async def mute_user_from_callback(self, callback: types.CallbackQuery, data: str):
        """–û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç –Ω–∞ –∑–∞–≥–ª—É—à–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            parts = data.split(":")
            user_id_str, chat_id_str = parts[1], parts[2]
            user_id: int = int(user_id_str)
            chat_id: int = int(chat_id_str)
            
            await self.bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                permissions=types.ChatPermissions(
                    can_send_messages=False,
                    can_send_media_messages=False,
                    can_send_polls=False,
                    can_send_other_messages=False,
                    can_add_web_page_previews=False,
                    can_change_info=False,
                    can_invite_users=False,
                    can_pin_messages=False,
                ),
                until_date=datetime.now() + timedelta(days=self.mute_duration_days)
            )
            
            await callback.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–≥–ª—É—à–µ–Ω–æ –Ω–∞ {self.mute_duration_days} –¥–Ω—ñ–≤")
            await callback.message.edit_text(
                callback.message.text + "\n\nüîá **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–≥–ª—É—à–µ–Ω–æ**",
                reply_markup=None,
                parse_mode="Markdown"
            )
        except Exception as e:
            await callback.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    async def delete_reported_message(self, callback: types.CallbackQuery, data: str):
        """–û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –Ω–∞ —è–∫–µ –ø–æ—Å–∫–∞—Ä–∂–∏–ª–∏—Å—å"""
        try:
            parts = data.split(":")
            msg_id_str, chat_id_str = parts[1], parts[2]
            msg_id: int = int(msg_id_str)
            chat_id: int = int(chat_id_str)
            
            if msg_id in self.deleted_messages:
                # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                try:
                    await self.bot.delete_message(chat_id=chat_id, message_id=msg_id)
                    await callback.answer("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ")
                except Exception as e:
                    print(f"Error deleting reported message: {e}")
                    await callback.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—å –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ú–æ–∂–ª–∏–≤–æ, –≤–æ–Ω–æ –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ.")
                
                # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                await callback.message.edit_text(
                    callback.message.text + "\n\n‚ùå **–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ**",
                    reply_markup=None,
                    parse_mode="Markdown"
                )
            else:
                await callback.answer("‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∫–µ—à—ñ")
        except Exception as e:
            await callback.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    async def ignore_report(self, callback: types.CallbackQuery, data: str):
        """–û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç –Ω–∞ —ñ–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è —Å–∫–∞—Ä–≥–∏"""
        try:
            await callback.answer("‚úÖ –°–∫–∞—Ä–≥—É –ø—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–æ")
            await callback.message.edit_text(
                callback.message.text + "\n\n‚úì **–°–∫–∞—Ä–≥—É –ø—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–æ**",
                reply_markup=None,
                parse_mode="Markdown"
            )
        except Exception as e:
            await callback.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    async def ban_user_from_callback(self, callback: types.CallbackQuery, data: str):
        try:
            parts = data.split(":")
            user_id_str, chat_id_str = parts[1], parts[2]
            user_id: int = int(user_id_str)
            chat_id: int = int(chat_id_str)
            await self.bot.ban_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                until_date=datetime.now() + timedelta(days=self.ban_duration_days)
            )
            await callback.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–±–∞–Ω–µ–Ω–æ –Ω–∞ {self.ban_duration_days} –¥–Ω—ñ–≤")
            await callback.message.edit_text(
                callback.message.text + "\n\nüö´ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–±–∞–Ω–µ–Ω–æ**",
                reply_markup=None,
                parse_mode="Markdown"
            )
        except Exception as e:
            await callback.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    async def restore_message_from_callback(self, callback: types.CallbackQuery, data: str):
        try:
            parts = data.split(":")
            msg_id_str, chat_id_str = parts[1], parts[2]
            msg_id: int = int(msg_id_str)
            chat_id: int = int(chat_id_str)
            if msg_id in self.deleted_messages:
                msg_info = self.deleted_messages[msg_id]
                user_display = make_user_tag(types.User(
                    id=msg_info['user_id'],
                    is_bot=False,
                    first_name=msg_info.get('user_first_name', ''),
                    last_name=msg_info.get('user_last_name', ''),
                    username=msg_info.get('user_username', None),
                    language_code=None
                ))
                # –í–∞–∂–ª–∏–≤–æ: –µ–∫—Ä–∞–Ω—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç –¥–ª—è Markdown!
                safe_text = (msg_info['text'] or "").replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]')
                restore_text = f"üìù **–ü–æ–≤–µ—Ä–Ω–µ–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {user_display}:**\n{safe_text}"
                try:
                    chat_member = await self.bot.get_chat_member(chat_id, msg_info['user_id'])
                    if chat_member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]:
                        await self.bot.restrict_chat_member(
                            chat_id=chat_id,
                            user_id=msg_info['user_id'],
                            permissions=types.ChatPermissions(
                                can_send_messages=True,
                                can_send_media_messages=True,
                                can_send_polls=True,
                                can_send_other_messages=True,
                                can_add_web_page_previews=True,
                                can_change_info=False,
                                can_invite_users=True,
                                can_pin_messages=False,
                                can_send_voice_notes = False,
                            ),
                        )
                except Exception as e:
                    print(e)
                try:
                    await self.bot.send_message(
                        chat_id=chat_id,
                        text=restore_text,
                        parse_mode="Markdown"
                    )
                    await callback.answer(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω—É—Ç–æ –∞–Ω–æ–Ω—ñ–º–Ω–æ\n\nüë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_display} –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ")
                    return
                except Exception as e:
                    print(f"Failed to send anonymously: {e}")
                    try:
                        await self.bot.send_message(
                            chat_id=chat_id,
                            text=restore_text,
                            parse_mode="Markdown"
                        )
                        await callback.answer("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω—É—Ç–æ –≤—ñ–¥ —ñ–º–µ–Ω—ñ –±–æ—Ç–∞")
                    except Exception as e2:
                        print(f"Failed to send as bot: {e2}")
                        await callback.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
                        return
                await callback.message.edit_text(
                    callback.message.text + "\n\n‚úÖ **–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω—É—Ç–æ**",
                    reply_markup=None,
                    parse_mode="Markdown"
                )
            else:
                await callback.answer("‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        except Exception as e:
            await callback.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    # async def restore_message_from_callback(self, callback: types.CallbackQuery, data: str):
    #     try:
    #         _, msg_id, chat_id = data.split(":")
    #         msg_id, chat_id = int(msg_id), int(chat_id)
    #         if msg_id in self.deleted_messages:
    #             msg_info = self.deleted_messages[msg_id]
    #             user_display = make_user_tag(types.User(
    #                 id=msg_info['user_id'],
    #                 is_bot=False,
    #                 first_name=msg_info.get('user_first_name', ''),
    #                 last_name=msg_info.get('user_last_name', ''),
    #                 username=msg_info.get('user_username', None),
    #                 language_code=None
    #             ))
    #             safe_text = (msg_info['text'] or "").replace('_', '\\_').replace('*', '\\*').replace('[',
    #                                                                                                  '\\[').replace(']',
    #                                                                                                                 '\\]')
    #             restore_text = f"üìù **–ü–æ–≤–µ—Ä–Ω–µ–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {user_display}:**\n{safe_text}"
    #             try:
    #                 await self.bot.send_message(
    #                     chat_id=chat_id,
    #                     text=restore_text,
    #                     parse_mode="Markdown"
    #                 )
    #             except Exception as e:
    #                 print(f"Failed to send anonymously: {e}")
    #                 await callback.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
    #                 return
    #             await self.bot.restrict_chat_member(
    #                 chat_id=chat_id,
    #                 user_id=msg_info['user_id'],
    #                 permissions=types.ChatPermissions(
    #                     can_send_messages=True,
    #                     can_send_media_messages=True,
    #                     can_send_polls=True,
    #                     can_send_other_messages=True,
    #                     can_add_web_page_previews=True,
    #                     can_change_info=True,
    #                     can_invite_users=True,
    #                     can_pin_messages=True,
    #                 ),
    #             )
    #             await callback.answer(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω—É—Ç–æ\nüë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_display} –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ")
    #             await callback.message.edit_text(
    #                 callback.message.text + "\n\n‚úÖ **–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω—É—Ç–æ**",
    #                 parse_mode="Markdown"
    #             )
    #             return
    #         else:
    #             await callback.answer("‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    #     except Exception as e:
    #         await callback.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    #         return

    async def add_chat_admins_callback(self, callback: types.CallbackQuery):
        try:
            chat_id = callback.message.chat.id
            chat_admins = await self.bot.get_chat_administrators(chat_id)
            added_count = 0
            for admin in chat_admins:
                if admin.user.id != self.bot.id:
                    if add_dynamic_admin(admin.user.id):
                        added_count += 1
            await callback.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ {added_count} –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ —á–∞—Ç—É")
            self.admin_ids = ADMIN_IDS
        except Exception as e:
            await callback.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    async def get_my_id(self, message: types.Message):
        user_id = message.from_user.id
        username = message.from_user.username or message.from_user.first_name
        is_admin = self.is_admin(user_id)
        admin_status = "üëë **–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä**" if is_admin else "üë§ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á**"
        await message.answer(
            f"üÜî **–í–∞—à ID:** `{user_id}`\n"
            f"üë§ **–Ü–º'—è:** {username}\n"
            f"üìä **–°—Ç–∞—Ç—É—Å:** {admin_status}\n\n"
            f"üí° *–©–æ–± –¥–æ–¥–∞—Ç–∏ —Å–µ–±–µ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –¥–æ–¥–∞–π—Ç–µ –≤–∞—à ID –¥–æ ADMIN_IDS –≤ .env —Ñ–∞–π–ª—ñ:*\n"
            f"`ADMIN_IDS={user_id}` –∞–±–æ `ADMIN_IDS=123456789,{user_id}`",
            parse_mode="Markdown"
        )

    async def admin_management(self, message: types.Message):
        if not self.is_admin(message.from_user.id):
            return
        env_admins = get_admin_ids()
        dynamic_admins = get_dynamic_admin_ids()
        env_text = "\n".join([f"‚Ä¢ {admin_id} (–∑ .env)" for admin_id in env_admins]) if env_admins else "–ù–µ–º–∞—î"
        dynamic_text = "\n".join(
            [f"‚Ä¢ {admin_id} (–¥–∏–Ω–∞–º—ñ—á–Ω–∏–π)" for admin_id in dynamic_admins]) if dynamic_admins else "–ù–µ–º–∞—î"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="add_admin_btn")],
            [InlineKeyboardButton(text="‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="remove_admin_btn")],
            [InlineKeyboardButton(text="üë• –î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ —á–∞—Ç—É", callback_data="add_chat_admins")]
        ])
        await message.answer(
            f"üëë **–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏**\n\n"
            f"üìã **–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –∑ .env:**\n{env_text}\n\n"
            f"üìã **–î–∏–Ω–∞–º—ñ—á–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏:**\n{dynamic_text}\n\n"
            f"üí° *–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –∑ .env –Ω–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª—è—Ç–∏*",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

    async def admin_add_admin(self, message: types.Message, state: FSMContext):
        if not self.is_admin(message.from_user.id):
            return
        await message.answer("üÜî –í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
        await state.set_state(AdminStates.waiting_for_admin_id_to_add)

    async def process_add_admin(self, message: types.Message, state: FSMContext):
        if not self.is_admin(message.from_user.id):
            return
        try:
            admin_id = int(message.text.strip())
            if add_dynamic_admin(admin_id):
                self.admin_ids = get_all_admin_ids()
                await message.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {admin_id} –¥–æ–¥–∞–Ω–æ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                print(f"‚úÖ Updated admin list: {self.admin_ids}")
            else:
                await message.answer(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {admin_id} –≤–∂–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∞–±–æ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–¥–∞–Ω–∏–π")
            await state.clear()
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")
            await state.clear()
        except Exception as e:
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            await state.clear()

    async def admin_remove_admin(self, message: types.Message, state: FSMContext):
        if not self.is_admin(message.from_user.id):
            return
        await message.answer("üÜî –í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤:")
        await state.set_state(AdminStates.waiting_for_admin_id_to_remove)

    async def process_remove_admin(self, message: types.Message, state: FSMContext):
        if not self.is_admin(message.from_user.id):
            return
        try:
            admin_id = int(message.text.strip())
            if is_env_admin(admin_id):
                await message.answer(f"‚ùå –ù–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id} (–¥–æ–¥–∞–Ω–∏–π —á–µ—Ä–µ–∑ .env)")
            elif remove_dynamic_admin(admin_id):
                self.admin_ids = get_all_admin_ids()
                await message.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {admin_id} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤")
                print(f"‚úÖ Updated admin list: {self.admin_ids}")
            else:
                await message.answer(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {admin_id} –Ω–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            await state.clear()
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")
            await state.clear()
        except Exception as e:
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            await state.clear()

    async def admin_add_chat_admins(self, message: types.Message):
        if not self.is_admin(message.from_user.id):
            return
        try:
            chat_id = message.chat.id
            chat_admins = await self.bot.get_chat_administrators(chat_id)
            added_count = 0
            for admin in chat_admins:
                if admin.user.id != self.bot.id:
                    if add_dynamic_admin(admin.user.id):
                        added_count += 1
            self.admin_ids = get_all_admin_ids()
            await message.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ {added_count} –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ —á–∞—Ç—É –¥–æ –±–æ—Ç–∞")
        except Exception as e:
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ —á–∞—Ç—É: {e}")

    async def admin_add_word(self, message: types.Message, state: FSMContext):
        if not self.is_admin(message.from_user.id):
            return
        await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å —Å–ª–æ–≤–æ –∞–±–æ —Ä–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó:")
        await state.set_state(AdminStates.waiting_for_word_to_add)

    async def process_add_word(self, message: types.Message, state: FSMContext):
        if not self.is_admin(message.from_user.id):
            return
        word = message.text.strip()
        if word.lower() == "–Ω–∞–∑–∞–¥":
            await self.admin_menu(message)
            await state.clear()
            return
        try:
            self.spam_filter.add_pattern(word)
            await message.answer(f"‚úÖ –°–ª–æ–≤–æ '{word}' –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó")
            await message.answer("‚úÖ –°–ø–∏—Å–æ–∫ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–æ")
            await state.clear()
        except Exception as e:
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å–ª–æ–≤–∞: {e}")
            await state.clear()

    async def admin_remove_word(self, message: types.Message, state: FSMContext):
        if not self.is_admin(message.from_user.id):
            return
        await message.answer("üóë –í–≤–µ–¥—ñ—Ç—å —Å–ª–æ–≤–æ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó:")
        await state.set_state(AdminStates.waiting_for_word_to_remove)

    async def process_remove_word(self, message: types.Message, state: FSMContext):
        if not self.is_admin(message.from_user.id):
            return
        word = message.text.strip()
        try:
            removed = self.spam_filter.remove_pattern(word)
            if removed:
                await message.answer(f"‚úÖ –°–ª–æ–≤–æ '{word}' –≤–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó")
            else:
                await message.answer(f"‚ùå –°–ª–æ–≤–æ '{word}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó")
            await state.clear()
        except Exception as e:
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å–ª–æ–≤–∞: {e}")
            await state.clear()

    async def admin_list_words(self, message: types.Message):
        if not self.is_admin(message.from_user.id):
            return
        patterns = self.spam_filter.get_patterns()
        if patterns:
            patterns_text = "\n".join([f"‚Ä¢ {pattern}" for pattern in patterns])
            await message.answer(
                f"üìã **–°–ø–∏—Å–æ–∫ —Å–ª—ñ–≤ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó:**\n\n{patterns_text}",
                parse_mode="Markdown"
            )
        else:
            await message.answer("üìã –°–ø–∏—Å–æ–∫ —Å–ª—ñ–≤ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –ø–æ—Ä–æ–∂–Ω—ñ–π")
            
    async def show_char_map_menu(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–∞—Ä—Ç–æ—é —Å–∏–º–≤–æ–ª—ñ–≤"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å", callback_data="add_char_btn")],
            [InlineKeyboardButton(text="‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å", callback_data="remove_char_btn")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π", callback_data="list_chars_btn")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_words")]
        ])
        await callback.message.edit_text(
            "üî§ **–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—é —Å–∏–º–≤–æ–ª—ñ–≤**\n\n"
            "–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ–∑–≤–æ–ª—è—î —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –º—ñ–∂ —Å–∏–º–≤–æ–ª–∞–º–∏, "
            "—â–æ–± –±–æ—Ç –º—ñ–≥ –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ —Å–ø–∞–º –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ –∑–∞–º—ñ–Ω–Ω–∏–∫–∏ –±—É–∫–≤.\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥–∏:\n"
            "- –ü—Ä–æ—Å—Ç—ñ –∑–∞–º—ñ–Ω–Ω–∏–∫–∏: '–æ' = 'o', '–∞' = 'a', '–æ' = '0'\n"
            "- –°–∫–ª–∞–¥–Ω—ñ –∑–∞–º—ñ–Ω–Ω–∏–∫–∏: '—ã' = '—å—ñ', '—é' = '–π—É', '—â' = 'shch'\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    async def start_add_char(self, callback: types.CallbackQuery, state: FSMContext):
        """–ó–∞–ø—É—Å–∫–∞—î –ø—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ —Å–∏–º–≤–æ–ª—ñ–≤"""
        await callback.message.edit_text(
            "‚ûï **–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ —Å–∏–º–≤–æ–ª—ñ–≤**\n\n"
            "–í–≤–µ–¥—ñ—Ç—å —Å–∏–º–≤–æ–ª, —è–∫–∏–π —Ç—Ä–µ–±–∞ —à—É–∫–∞—Ç–∏ (–æ—Ä–∏–≥—ñ–Ω–∞–ª):\n\n"
            "üí° –î–ª—è –æ—Ä–∏–≥—ñ–Ω–∞–ª—É –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ª–∏—à–µ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–∞').",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="char_map_btn")]
            ]),
            parse_mode="Markdown"
        )
        await state.set_state(AdminStates.waiting_for_char_to_add)
        
    async def process_add_char(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ"""
        if not self.is_admin(message.from_user.id):
            return
            
        char = message.text.strip()
        if len(char) != 1:
            await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ª–∏—à–µ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª. –ë–∞–≥–∞—Ç–æ—Å–∏–º–≤–æ–ª—å–Ω—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∑–∞–º—ñ–Ω–Ω–∏–∫—ñ–≤, –∞–ª–µ –Ω–µ –¥–ª—è –æ—Ä–∏–≥—ñ–Ω–∞–ª—ñ–≤.")
            return
            
        await state.update_data(char_to_add=char)
        await message.answer(
            f"üëç –û–±—Ä–∞–Ω–æ —Å–∏–º–≤–æ–ª: `{char}`\n\n"
            f"–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —Å–∏–º–≤–æ–ª-–∑–∞–º—ñ–Ω–Ω–∏–∫ –∞–±–æ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é —Å–∏–º–≤–æ–ª—ñ–≤ (–Ω–∞ —â–æ –º–æ–∂–µ –±—É—Ç–∏ –∑–∞–º—ñ–Ω–µ–Ω–æ):",
            parse_mode="Markdown"
        )
        await state.set_state(AdminStates.waiting_for_mapping_to_add)
        
    async def process_add_mapping(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—É-–∑–∞–º—ñ–Ω–Ω–∏–∫–∞"""
        if not self.is_admin(message.from_user.id):
            return
            
        mapping = message.text.strip()
        if not mapping:
            await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–∏–º–≤–æ–ª –∞–±–æ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é —Å–∏–º–≤–æ–ª—ñ–≤.")
            return
            
        data = await state.get_data()
        char = data.get("char_to_add")
        
        try:
            added = self.spam_filter.add_char_mapping(char, mapping)
            if added:
                await message.answer(
                    f"‚úÖ –î–æ–¥–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å: `{char}` ‚Üí `{mapping}`\n\n"
                    f"–¢–µ–ø–µ—Ä –±–æ—Ç –±—É–¥–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—Ç–∏ `{mapping}` —è–∫ `{char}` –ø—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó.",
                    parse_mode="Markdown"
                )
            else:
                await message.answer(f"‚ÑπÔ∏è –í—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å `{char}` ‚Üí `{mapping}` –≤–∂–µ —ñ—Å–Ω—É—î.", parse_mode="Markdown")
        except Exception as e:
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ: {e}")
            
        await state.clear()
        
    async def start_remove_char(self, callback: types.CallbackQuery, state: FSMContext):
        """–ó–∞–ø—É—Å–∫–∞—î –ø—Ä–æ—Ü–µ—Å –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ —Å–∏–º–≤–æ–ª—ñ–≤"""
        await callback.message.edit_text(
            "‚ûñ **–í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ —Å–∏–º–≤–æ–ª—ñ–≤**\n\n"
            "–í–≤–µ–¥—ñ—Ç—å —Å–∏–º–≤–æ–ª, –¥–ª—è —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å (–æ—Ä–∏–≥—ñ–Ω–∞–ª):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="char_map_btn")]
            ]),
            parse_mode="Markdown"
        )
        await state.set_state(AdminStates.waiting_for_char_to_remove)
        
    async def process_remove_char(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ"""
        if not self.is_admin(message.from_user.id):
            return
            
        char = message.text.strip()
        if len(char) != 1:
            await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ª–∏—à–µ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª.")
            return
            
        char_map = self.spam_filter.get_char_map()
        if char not in char_map or not char_map[char]:
            await message.answer(f"‚ùå –°–∏–º–≤–æ–ª `{char}` –Ω–µ –º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π.", parse_mode="Markdown")
            await state.clear()
            return
            
        await state.update_data(char_to_remove=char)
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±—ñ–ª—å—à –±–µ–∑–ø–µ—á–Ω–∏–π –≤–∏–≤—ñ–¥ –¥–ª—è –±–∞–≥–∞—Ç–æ—Å–∏–º–≤–æ–ª—å–Ω–∏—Ö –∑–∞–º—ñ–Ω–∏–∫—ñ–≤
        mappings = ", ".join([f"`{m}`" for m in char_map[char]])
        
        await message.answer(
            f"üëç –ó–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –¥–ª—è —Å–∏–º–≤–æ–ª—É `{char}`: {mappings}\n\n"
            f"–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —Å–∏–º–≤–æ–ª –∞–±–æ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é —Å–∏–º–≤–æ–ª—ñ–≤-–∑–∞–º—ñ–Ω–Ω–∏–∫—ñ–≤, —è–∫—É —Ç—Ä–µ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏:",
            parse_mode="Markdown"
        )
        await state.set_state(AdminStates.waiting_for_mapping_to_remove)
        
    async def process_remove_mapping(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—É-–∑–∞–º—ñ–Ω–Ω–∏–∫–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è"""
        if not self.is_admin(message.from_user.id):
            return
            
        mapping = message.text.strip()
        if not mapping:
            await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–∏–º–≤–æ–ª –∞–±–æ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é —Å–∏–º–≤–æ–ª—ñ–≤.")
            return
            
        data = await state.get_data()
        char = data.get("char_to_remove")
        
        try:
            removed = self.spam_filter.remove_char_mapping(char, mapping)
            if removed:
                await message.answer(
                    f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å: `{char}` ‚Üí `{mapping}`",
                    parse_mode="Markdown"
                )
            else:
                await message.answer(
                    f"‚ùå –í—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å `{char}` ‚Üí `{mapping}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.",
                    parse_mode="Markdown"
                )
        except Exception as e:
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ: {e}")
            
        await state.clear()
        
    async def show_char_list(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π —Å–∏–º–≤–æ–ª—ñ–≤"""
        char_map = self.spam_filter.get_char_map()
        
        if not char_map:
            await callback.message.edit_text(
                "üìã **–°–ø–∏—Å–æ–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π —Å–∏–º–≤–æ–ª—ñ–≤**\n\n"
                "–°–ª–æ–≤–Ω–∏–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π –ø–æ—Ä–æ–∂–Ω—ñ–π.\n\n"
                "–î–æ–¥–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Å–ø–∞–º—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="char_map_btn")]
                ]),
                parse_mode="Markdown"
            )
            return
            
        # –°–æ—Ä—Ç—É—î–º–æ —Å–∏–º–≤–æ–ª–∏ –∑–∞ –∞–ª—Ñ–∞–≤—ñ—Ç–æ–º
        chars = sorted(char_map.keys())
        
        text_parts = ["üìã **–°–ø–∏—Å–æ–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π —Å–∏–º–≤–æ–ª—ñ–≤**\n\n"]
        for char in chars:
            mappings = ", ".join(char_map[char])
            text_parts.append(f"`{char}` ‚Üí {mappings}")
            
        # –û–±'—î–¥–Ω—É—î–º–æ –≤—Å—ñ —á–∞—Å—Ç–∏–Ω–∏ —Ç–µ–∫—Å—Ç—É –∑ —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è–º –Ω–æ–≤–∏–º —Ä—è–¥–∫–æ–º
        text = "\n".join(text_parts)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–≤–∂–∏–Ω—É —Ç–µ–∫—Å—Ç—É, —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∏—â–∏—Ç–∏ –ª—ñ–º—ñ—Ç Telegram
        if len(text) > 4000:
            text = text[:3900] + "\n\n... (—Å–ø–∏—Å–æ–∫ —Å–∫–æ—Ä–æ—á–µ–Ω–æ —á–µ—Ä–µ–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è Telegram)"
            
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="char_map_btn")]
            ]),
            parse_mode="Markdown"
        )